{"ast":null,"code":"var _jsxFileName = \"/Users/kushki/Documents/Iniciativas_propias/Home_tasks/src/components/NotificationManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Notification from './Notification';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NotificationManager = ({\n  members,\n  tasks,\n  newTaskId,\n  onDeleteTaskId\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const addNotification = (message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type\n    }]);\n    return id;\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  const sendNotification = (member, message, methods) => {\n    // Notificación por WhatsApp (simulada)\n    if (methods.whatsapp && member.phone) {\n      console.log(`Enviando WhatsApp a ${member.phone}: ${message}`);\n      addNotification(`WhatsApp enviado a ${member.name}`, 'success');\n    }\n\n    // Notificación por Email (simulada)\n    if (methods.email && member.email) {\n      console.log(`Enviando email a ${member.email}: ${message}`);\n      addNotification(`Email enviado a ${member.name}`, 'success');\n    }\n  };\n  useEffect(() => {\n    // Notificación al crear nueva tarea\n    if (newTaskId) {\n      const task = tasks.find(t => t.id === newTaskId);\n      if (task) {\n        const member = members.find(m => m.id === task.assignedTo);\n        if (member) {\n          const message = `Nueva tarea asignada: ${task.title} para el ${new Date(task.startDate).toLocaleDateString()}. Recurrencia: cada ${task.recurrenceDays} días`;\n          sendNotification(member, message, task.notificationMethods);\n        }\n      }\n    }\n  }, [newTaskId, members, tasks]);\n  useEffect(() => {\n    // Notificaciones programadas\n    const checkScheduledNotifications = () => {\n      const now = new Date();\n      const currentHour = now.getHours();\n      if (currentHour === 8) {\n        tasks.forEach(task => {\n          const taskDate = new Date(task.startDate);\n          const daysDiff = Math.floor((now - taskDate) / (1000 * 60 * 60 * 24));\n          if (daysDiff % task.recurrenceDays === 0 || daysDiff % task.recurrenceDays === task.recurrenceDays - 1) {\n            const member = members.find(m => m.id === task.assignedTo);\n            if (member) {\n              const message = `Recordatorio: ${task.title} ${daysDiff % task.recurrenceDays === 0 ? 'hoy' : 'mañana'} a las 8 AM`;\n              sendNotification(member, message, task.notificationMethods);\n            }\n          }\n        });\n      }\n    };\n    const interval = setInterval(checkScheduledNotifications, 60 * 60 * 1000);\n    checkScheduledNotifications();\n    return () => clearInterval(interval);\n  }, [members, tasks]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: notifications.map(notification => /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => removeNotification(notification.id)\n    }, notification.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(NotificationManager, \"2SdJNwZGCcacptfqR8s6ep7Bk7A=\");\n_c = NotificationManager;\nexport default NotificationManager;\nvar _c;\n$RefreshReg$(_c, \"NotificationManager\");","map":{"version":3,"names":["React","useState","useEffect","Notification","jsxDEV","_jsxDEV","Fragment","_Fragment","NotificationManager","members","tasks","newTaskId","onDeleteTaskId","_s","notifications","setNotifications","addNotification","message","type","id","Date","now","prev","removeNotification","filter","n","sendNotification","member","methods","whatsapp","phone","console","log","name","email","task","find","t","m","assignedTo","title","startDate","toLocaleDateString","recurrenceDays","notificationMethods","checkScheduledNotifications","currentHour","getHours","forEach","taskDate","daysDiff","Math","floor","interval","setInterval","clearInterval","children","map","notification","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kushki/Documents/Iniciativas_propias/Home_tasks/src/components/NotificationManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Notification from './Notification';\n\nconst NotificationManager = ({ members, tasks, newTaskId, onDeleteTaskId }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const addNotification = (message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { id, message, type }]);\n    return id;\n  };\n\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const sendNotification = (member, message, methods) => {\n    // Notificación por WhatsApp (simulada)\n    if (methods.whatsapp && member.phone) {\n      console.log(`Enviando WhatsApp a ${member.phone}: ${message}`);\n      addNotification(`WhatsApp enviado a ${member.name}`, 'success');\n    }\n    \n    // Notificación por Email (simulada)\n    if (methods.email && member.email) {\n      console.log(`Enviando email a ${member.email}: ${message}`);\n      addNotification(`Email enviado a ${member.name}`, 'success');\n    }\n  };\n\n  useEffect(() => {\n    // Notificación al crear nueva tarea\n    if (newTaskId) {\n      const task = tasks.find(t => t.id === newTaskId);\n      if (task) {\n        const member = members.find(m => m.id === task.assignedTo);\n        if (member) {\n          const message = `Nueva tarea asignada: ${task.title} para el ${new Date(task.startDate).toLocaleDateString()}. Recurrencia: cada ${task.recurrenceDays} días`;\n          sendNotification(member, message, task.notificationMethods);\n        }\n      }\n    }\n  }, [newTaskId, members, tasks]);\n\n  useEffect(() => {\n    // Notificaciones programadas\n    const checkScheduledNotifications = () => {\n      const now = new Date();\n      const currentHour = now.getHours();\n      \n      if (currentHour === 8) {\n        tasks.forEach(task => {\n          const taskDate = new Date(task.startDate);\n          const daysDiff = Math.floor((now - taskDate) / (1000 * 60 * 60 * 24));\n          \n          if (daysDiff % task.recurrenceDays === 0 || daysDiff % task.recurrenceDays === task.recurrenceDays - 1) {\n            const member = members.find(m => m.id === task.assignedTo);\n            if (member) {\n              const message = `Recordatorio: ${task.title} ${daysDiff % task.recurrenceDays === 0 ? 'hoy' : 'mañana'} a las 8 AM`;\n              sendNotification(member, message, task.notificationMethods);\n            }\n          }\n        });\n      }\n    };\n\n    const interval = setInterval(checkScheduledNotifications, 60 * 60 * 1000);\n    checkScheduledNotifications();\n\n    return () => clearInterval(interval);\n  }, [members, tasks]);\n\n  return (\n    <>\n      {notifications.map(notification => (\n        <Notification\n          key={notification.id}\n          message={notification.message}\n          type={notification.type}\n          onClose={() => removeNotification(notification.id)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default NotificationManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}