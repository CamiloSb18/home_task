{"ast":null,"code":"var _jsxFileName = \"/Users/kushki/Documents/Iniciativas_propias/Home_tasks/src/components/NotificationManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Notification from './Notification';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NotificationManager = ({\n  members,\n  tasks,\n  newTaskId\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [remindedTaskIds, setRemindedTaskIds] = useState([]);\n  const addNotification = (message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type\n    }]);\n    return id;\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  const sendNotification = async (member, message, methods) => {\n    try {\n      const response = await fetch('http://localhost:5051/api/notify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          member,\n          message,\n          methods\n        })\n      });\n      if (response.ok) {\n        if (methods.whatsapp) addNotification(`WhatsApp enviado a ${member.name}`, 'success');\n        if (methods.email) addNotification(`Email enviado a ${member.name}`, 'success');\n      } else {\n        const error = await response.json();\n        addNotification(`Error al enviar notificación: ${error.error}`, 'error');\n      }\n    } catch (err) {\n      console.error(err);\n      addNotification('Error al conectar con el servidor de notificaciones', 'error');\n    }\n  };\n\n  // Notificación al crear nueva tarea\n  useEffect(() => {\n    if (newTaskId) {\n      const task = tasks.find(t => t.id === newTaskId);\n      if (task) {\n        const member = members.find(m => m.id === task.assignedTo);\n        if (member) {\n          const [year, month, day] = task.startDate.split('-');\n          const formattedDate = `${day}/${month}/${year}`;\n          const message = `Nueva tarea asignada: ${task.title} para el ${formattedDate}. Se repite cada ${task.recurrenceDays} días`;\n          sendNotification(member, message, task.notificationMethods);\n        }\n      }\n    }\n  }, [newTaskId, members, tasks]);\n\n  // Recordatorio el día de la tarea a las 10am hora Colombia (UTC-5)\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n\n      // Hora Colombia sin horario de verano: UTC-5\n      const colombiaTime = new Date(now.toLocaleString(\"en-US\", {\n        timeZone: \"America/Bogota\"\n      }));\n\n      // Solo enviar recordatorio a las 10:00 am (entre 10:00 y 10:01 para evitar múltiples envíos)\n      if (colombiaTime.getHours() === 10 && colombiaTime.getMinutes() === 0) {\n        tasks.forEach(task => {\n          if (remindedTaskIds.includes(task.id)) return; // ya enviado\n\n          // Fecha tarea (sin hora)\n          const [year, month, day] = task.startDate.split('-');\n          const taskDate = new Date(year, month - 1, day);\n\n          // Fecha hoy Colombia (sin hora)\n          const today = new Date(colombiaTime.getFullYear(), colombiaTime.getMonth(), colombiaTime.getDate());\n          if (taskDate.getTime() === today.getTime()) {\n            const member = members.find(m => m.id === task.assignedTo);\n            if (member) {\n              const message = `Recordatorio: La tarea \"${task.title}\" se debe realizar hoy.`;\n              sendNotification(member, message, task.notificationMethods);\n              setRemindedTaskIds(prev => [...prev, task.id]);\n            }\n          }\n        });\n      }\n    }, 60 * 1000); // cada minuto\n\n    return () => clearInterval(intervalId);\n  }, [tasks, members, remindedTaskIds]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: notifications.map(notification => /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type\n    }, notification.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(NotificationManager, \"oruEEz4G+RM6p7Pd4YWaqG9Hf8A=\");\n_c = NotificationManager;\nexport default NotificationManager;\nvar _c;\n$RefreshReg$(_c, \"NotificationManager\");","map":{"version":3,"names":["React","useState","useEffect","Notification","jsxDEV","_jsxDEV","Fragment","_Fragment","NotificationManager","members","tasks","newTaskId","_s","notifications","setNotifications","remindedTaskIds","setRemindedTaskIds","addNotification","message","type","id","Date","now","prev","removeNotification","filter","n","sendNotification","member","methods","response","fetch","method","headers","body","JSON","stringify","ok","whatsapp","name","email","error","json","err","console","task","find","t","m","assignedTo","year","month","day","startDate","split","formattedDate","title","recurrenceDays","notificationMethods","intervalId","setInterval","colombiaTime","toLocaleString","timeZone","getHours","getMinutes","forEach","includes","taskDate","today","getFullYear","getMonth","getDate","getTime","clearInterval","children","map","notification","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kushki/Documents/Iniciativas_propias/Home_tasks/src/components/NotificationManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Notification from './Notification';\n\nconst NotificationManager = ({ members, tasks, newTaskId }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [remindedTaskIds, setRemindedTaskIds] = useState([]);\n\n  const addNotification = (message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { id, message, type }]);\n    return id;\n  };\n\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const sendNotification = async (member, message, methods) => {\n    try {\n      const response = await fetch('http://localhost:5051/api/notify', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ member, message, methods }),\n      });\n\n      if (response.ok) {\n        if (methods.whatsapp) addNotification(`WhatsApp enviado a ${member.name}`, 'success');\n        if (methods.email) addNotification(`Email enviado a ${member.name}`, 'success');\n      } else {\n        const error = await response.json();\n        addNotification(`Error al enviar notificación: ${error.error}`, 'error');\n      }\n    } catch (err) {\n      console.error(err);\n      addNotification('Error al conectar con el servidor de notificaciones', 'error');\n    }\n  };\n\n  // Notificación al crear nueva tarea\n  useEffect(() => {\n    if (newTaskId) {\n      const task = tasks.find(t => t.id === newTaskId);\n      if (task) {\n        const member = members.find(m => m.id === task.assignedTo);\n        if (member) {\n          const [year, month, day] = task.startDate.split('-');\n          const formattedDate = `${day}/${month}/${year}`;\n          const message = `Nueva tarea asignada: ${task.title} para el ${formattedDate}. Se repite cada ${task.recurrenceDays} días`;\n\n          sendNotification(member, message, task.notificationMethods);\n        }\n      }\n    }\n  }, [newTaskId, members, tasks]);\n\n  // Recordatorio el día de la tarea a las 10am hora Colombia (UTC-5)\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const now = new Date();\n\n      // Hora Colombia sin horario de verano: UTC-5\n      const colombiaTime = new Date(now.toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" }));\n\n      // Solo enviar recordatorio a las 10:00 am (entre 10:00 y 10:01 para evitar múltiples envíos)\n      if (colombiaTime.getHours() === 10 && colombiaTime.getMinutes() === 0) {\n        tasks.forEach(task => {\n          if (remindedTaskIds.includes(task.id)) return; // ya enviado\n\n          // Fecha tarea (sin hora)\n          const [year, month, day] = task.startDate.split('-');\n          const taskDate = new Date(year, month - 1, day);\n\n          // Fecha hoy Colombia (sin hora)\n          const today = new Date(colombiaTime.getFullYear(), colombiaTime.getMonth(), colombiaTime.getDate());\n\n          if (taskDate.getTime() === today.getTime()) {\n            const member = members.find(m => m.id === task.assignedTo);\n            if (member) {\n              const message = `Recordatorio: La tarea \"${task.title}\" se debe realizar hoy.`;\n              sendNotification(member, message, task.notificationMethods);\n\n              setRemindedTaskIds(prev => [...prev, task.id]);\n            }\n          }\n        });\n      }\n    }, 60 * 1000); // cada minuto\n\n    return () => clearInterval(intervalId);\n  }, [tasks, members, remindedTaskIds]);\n\n  return (\n    <>\n      {notifications.map(notification => (\n        <Notification\n          key={notification.id}\n          message={notification.message}\n          type={notification.type}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default NotificationManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}